// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"server/dao/model"
)

func newManager(db *gorm.DB, opts ...gen.DOOption) manager {
	_manager := manager{}

	_manager.managerDo.UseDB(db, opts...)
	_manager.managerDo.UseModel(&model.Manager{})

	tableName := _manager.managerDo.TableName()
	_manager.ALL = field.NewAsterisk(tableName)
	_manager.ID = field.NewInt32(tableName, "id")
	_manager.Name = field.NewString(tableName, "name")
	_manager.Birthday = field.NewTime(tableName, "birthday")
	_manager.Qualifications = field.NewString(tableName, "qualifications")
	_manager.Photo = field.NewString(tableName, "photo")
	_manager.Bio = field.NewString(tableName, "bio")

	_manager.fillFieldMap()

	return _manager
}

type manager struct {
	managerDo managerDo

	ALL            field.Asterisk
	ID             field.Int32
	Name           field.String
	Birthday       field.Time
	Qualifications field.String
	Photo          field.String
	Bio            field.String

	fieldMap map[string]field.Expr
}

func (m manager) Table(newTableName string) *manager {
	m.managerDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m manager) As(alias string) *manager {
	m.managerDo.DO = *(m.managerDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *manager) updateTableName(table string) *manager {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewInt32(table, "id")
	m.Name = field.NewString(table, "name")
	m.Birthday = field.NewTime(table, "birthday")
	m.Qualifications = field.NewString(table, "qualifications")
	m.Photo = field.NewString(table, "photo")
	m.Bio = field.NewString(table, "bio")

	m.fillFieldMap()

	return m
}

func (m *manager) WithContext(ctx context.Context) *managerDo { return m.managerDo.WithContext(ctx) }

func (m manager) TableName() string { return m.managerDo.TableName() }

func (m manager) Alias() string { return m.managerDo.Alias() }

func (m manager) Columns(cols ...field.Expr) gen.Columns { return m.managerDo.Columns(cols...) }

func (m *manager) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *manager) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 6)
	m.fieldMap["id"] = m.ID
	m.fieldMap["name"] = m.Name
	m.fieldMap["birthday"] = m.Birthday
	m.fieldMap["qualifications"] = m.Qualifications
	m.fieldMap["photo"] = m.Photo
	m.fieldMap["bio"] = m.Bio
}

func (m manager) clone(db *gorm.DB) manager {
	m.managerDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m manager) replaceDB(db *gorm.DB) manager {
	m.managerDo.ReplaceDB(db)
	return m
}

type managerDo struct{ gen.DO }

func (m managerDo) Debug() *managerDo {
	return m.withDO(m.DO.Debug())
}

func (m managerDo) WithContext(ctx context.Context) *managerDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m managerDo) ReadDB() *managerDo {
	return m.Clauses(dbresolver.Read)
}

func (m managerDo) WriteDB() *managerDo {
	return m.Clauses(dbresolver.Write)
}

func (m managerDo) Session(config *gorm.Session) *managerDo {
	return m.withDO(m.DO.Session(config))
}

func (m managerDo) Clauses(conds ...clause.Expression) *managerDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m managerDo) Returning(value interface{}, columns ...string) *managerDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m managerDo) Not(conds ...gen.Condition) *managerDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m managerDo) Or(conds ...gen.Condition) *managerDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m managerDo) Select(conds ...field.Expr) *managerDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m managerDo) Where(conds ...gen.Condition) *managerDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m managerDo) Order(conds ...field.Expr) *managerDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m managerDo) Distinct(cols ...field.Expr) *managerDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m managerDo) Omit(cols ...field.Expr) *managerDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m managerDo) Join(table schema.Tabler, on ...field.Expr) *managerDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m managerDo) LeftJoin(table schema.Tabler, on ...field.Expr) *managerDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m managerDo) RightJoin(table schema.Tabler, on ...field.Expr) *managerDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m managerDo) Group(cols ...field.Expr) *managerDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m managerDo) Having(conds ...gen.Condition) *managerDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m managerDo) Limit(limit int) *managerDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m managerDo) Offset(offset int) *managerDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m managerDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *managerDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m managerDo) Unscoped() *managerDo {
	return m.withDO(m.DO.Unscoped())
}

func (m managerDo) Create(values ...*model.Manager) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m managerDo) CreateInBatches(values []*model.Manager, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m managerDo) Save(values ...*model.Manager) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m managerDo) First() (*model.Manager, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Manager), nil
	}
}

func (m managerDo) Take() (*model.Manager, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Manager), nil
	}
}

func (m managerDo) Last() (*model.Manager, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Manager), nil
	}
}

func (m managerDo) Find() ([]*model.Manager, error) {
	result, err := m.DO.Find()
	return result.([]*model.Manager), err
}

func (m managerDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Manager, err error) {
	buf := make([]*model.Manager, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m managerDo) FindInBatches(result *[]*model.Manager, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m managerDo) Attrs(attrs ...field.AssignExpr) *managerDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m managerDo) Assign(attrs ...field.AssignExpr) *managerDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m managerDo) Joins(fields ...field.RelationField) *managerDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m managerDo) Preload(fields ...field.RelationField) *managerDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m managerDo) FirstOrInit() (*model.Manager, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Manager), nil
	}
}

func (m managerDo) FirstOrCreate() (*model.Manager, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Manager), nil
	}
}

func (m managerDo) FindByPage(offset int, limit int) (result []*model.Manager, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m managerDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m managerDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m managerDo) Delete(models ...*model.Manager) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *managerDo) withDO(do gen.Dao) *managerDo {
	m.DO = *do.(*gen.DO)
	return m
}
