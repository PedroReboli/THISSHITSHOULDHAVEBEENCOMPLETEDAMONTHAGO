// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"server/dao/model"
)

func newArchitect(db *gorm.DB, opts ...gen.DOOption) architect {
	_architect := architect{}

	_architect.architectDo.UseDB(db, opts...)
	_architect.architectDo.UseModel(&model.Architect{})

	tableName := _architect.architectDo.TableName()
	_architect.ALL = field.NewAsterisk(tableName)
	_architect.ID = field.NewInt32(tableName, "id")
	_architect.Name = field.NewString(tableName, "name")

	_architect.fillFieldMap()

	return _architect
}

type architect struct {
	architectDo architectDo

	ALL  field.Asterisk
	ID   field.Int32
	Name field.String

	fieldMap map[string]field.Expr
}

func (a architect) Table(newTableName string) *architect {
	a.architectDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a architect) As(alias string) *architect {
	a.architectDo.DO = *(a.architectDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *architect) updateTableName(table string) *architect {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt32(table, "id")
	a.Name = field.NewString(table, "name")

	a.fillFieldMap()

	return a
}

func (a *architect) WithContext(ctx context.Context) *architectDo {
	return a.architectDo.WithContext(ctx)
}

func (a architect) TableName() string { return a.architectDo.TableName() }

func (a architect) Alias() string { return a.architectDo.Alias() }

func (a architect) Columns(cols ...field.Expr) gen.Columns { return a.architectDo.Columns(cols...) }

func (a *architect) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *architect) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 2)
	a.fieldMap["id"] = a.ID
	a.fieldMap["name"] = a.Name
}

func (a architect) clone(db *gorm.DB) architect {
	a.architectDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a architect) replaceDB(db *gorm.DB) architect {
	a.architectDo.ReplaceDB(db)
	return a
}

type architectDo struct{ gen.DO }

func (a architectDo) Debug() *architectDo {
	return a.withDO(a.DO.Debug())
}

func (a architectDo) WithContext(ctx context.Context) *architectDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a architectDo) ReadDB() *architectDo {
	return a.Clauses(dbresolver.Read)
}

func (a architectDo) WriteDB() *architectDo {
	return a.Clauses(dbresolver.Write)
}

func (a architectDo) Session(config *gorm.Session) *architectDo {
	return a.withDO(a.DO.Session(config))
}

func (a architectDo) Clauses(conds ...clause.Expression) *architectDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a architectDo) Returning(value interface{}, columns ...string) *architectDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a architectDo) Not(conds ...gen.Condition) *architectDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a architectDo) Or(conds ...gen.Condition) *architectDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a architectDo) Select(conds ...field.Expr) *architectDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a architectDo) Where(conds ...gen.Condition) *architectDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a architectDo) Order(conds ...field.Expr) *architectDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a architectDo) Distinct(cols ...field.Expr) *architectDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a architectDo) Omit(cols ...field.Expr) *architectDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a architectDo) Join(table schema.Tabler, on ...field.Expr) *architectDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a architectDo) LeftJoin(table schema.Tabler, on ...field.Expr) *architectDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a architectDo) RightJoin(table schema.Tabler, on ...field.Expr) *architectDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a architectDo) Group(cols ...field.Expr) *architectDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a architectDo) Having(conds ...gen.Condition) *architectDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a architectDo) Limit(limit int) *architectDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a architectDo) Offset(offset int) *architectDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a architectDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *architectDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a architectDo) Unscoped() *architectDo {
	return a.withDO(a.DO.Unscoped())
}

func (a architectDo) Create(values ...*model.Architect) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a architectDo) CreateInBatches(values []*model.Architect, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a architectDo) Save(values ...*model.Architect) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a architectDo) First() (*model.Architect, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Architect), nil
	}
}

func (a architectDo) Take() (*model.Architect, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Architect), nil
	}
}

func (a architectDo) Last() (*model.Architect, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Architect), nil
	}
}

func (a architectDo) Find() ([]*model.Architect, error) {
	result, err := a.DO.Find()
	return result.([]*model.Architect), err
}

func (a architectDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Architect, err error) {
	buf := make([]*model.Architect, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a architectDo) FindInBatches(result *[]*model.Architect, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a architectDo) Attrs(attrs ...field.AssignExpr) *architectDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a architectDo) Assign(attrs ...field.AssignExpr) *architectDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a architectDo) Joins(fields ...field.RelationField) *architectDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a architectDo) Preload(fields ...field.RelationField) *architectDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a architectDo) FirstOrInit() (*model.Architect, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Architect), nil
	}
}

func (a architectDo) FirstOrCreate() (*model.Architect, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Architect), nil
	}
}

func (a architectDo) FindByPage(offset int, limit int) (result []*model.Architect, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a architectDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a architectDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a architectDo) Delete(models ...*model.Architect) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *architectDo) withDO(do gen.Dao) *architectDo {
	a.DO = *do.(*gen.DO)
	return a
}
