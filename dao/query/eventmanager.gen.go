// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"server/dao/model"
)

func newEventmanager(db *gorm.DB, opts ...gen.DOOption) eventmanager {
	_eventmanager := eventmanager{}

	_eventmanager.eventmanagerDo.UseDB(db, opts...)
	_eventmanager.eventmanagerDo.UseModel(&model.Eventmanager{})

	tableName := _eventmanager.eventmanagerDo.TableName()
	_eventmanager.ALL = field.NewAsterisk(tableName)
	_eventmanager.ID = field.NewInt32(tableName, "id")
	_eventmanager.Managerid = field.NewInt32(tableName, "managerid")
	_eventmanager.Eventid = field.NewInt32(tableName, "eventid")

	_eventmanager.fillFieldMap()

	return _eventmanager
}

type eventmanager struct {
	eventmanagerDo eventmanagerDo

	ALL       field.Asterisk
	ID        field.Int32
	Managerid field.Int32
	Eventid   field.Int32

	fieldMap map[string]field.Expr
}

func (e eventmanager) Table(newTableName string) *eventmanager {
	e.eventmanagerDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e eventmanager) As(alias string) *eventmanager {
	e.eventmanagerDo.DO = *(e.eventmanagerDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *eventmanager) updateTableName(table string) *eventmanager {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt32(table, "id")
	e.Managerid = field.NewInt32(table, "managerid")
	e.Eventid = field.NewInt32(table, "eventid")

	e.fillFieldMap()

	return e
}

func (e *eventmanager) WithContext(ctx context.Context) *eventmanagerDo {
	return e.eventmanagerDo.WithContext(ctx)
}

func (e eventmanager) TableName() string { return e.eventmanagerDo.TableName() }

func (e eventmanager) Alias() string { return e.eventmanagerDo.Alias() }

func (e eventmanager) Columns(cols ...field.Expr) gen.Columns {
	return e.eventmanagerDo.Columns(cols...)
}

func (e *eventmanager) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *eventmanager) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 3)
	e.fieldMap["id"] = e.ID
	e.fieldMap["managerid"] = e.Managerid
	e.fieldMap["eventid"] = e.Eventid
}

func (e eventmanager) clone(db *gorm.DB) eventmanager {
	e.eventmanagerDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e eventmanager) replaceDB(db *gorm.DB) eventmanager {
	e.eventmanagerDo.ReplaceDB(db)
	return e
}

type eventmanagerDo struct{ gen.DO }

func (e eventmanagerDo) Debug() *eventmanagerDo {
	return e.withDO(e.DO.Debug())
}

func (e eventmanagerDo) WithContext(ctx context.Context) *eventmanagerDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e eventmanagerDo) ReadDB() *eventmanagerDo {
	return e.Clauses(dbresolver.Read)
}

func (e eventmanagerDo) WriteDB() *eventmanagerDo {
	return e.Clauses(dbresolver.Write)
}

func (e eventmanagerDo) Session(config *gorm.Session) *eventmanagerDo {
	return e.withDO(e.DO.Session(config))
}

func (e eventmanagerDo) Clauses(conds ...clause.Expression) *eventmanagerDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e eventmanagerDo) Returning(value interface{}, columns ...string) *eventmanagerDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e eventmanagerDo) Not(conds ...gen.Condition) *eventmanagerDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e eventmanagerDo) Or(conds ...gen.Condition) *eventmanagerDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e eventmanagerDo) Select(conds ...field.Expr) *eventmanagerDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e eventmanagerDo) Where(conds ...gen.Condition) *eventmanagerDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e eventmanagerDo) Order(conds ...field.Expr) *eventmanagerDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e eventmanagerDo) Distinct(cols ...field.Expr) *eventmanagerDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e eventmanagerDo) Omit(cols ...field.Expr) *eventmanagerDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e eventmanagerDo) Join(table schema.Tabler, on ...field.Expr) *eventmanagerDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e eventmanagerDo) LeftJoin(table schema.Tabler, on ...field.Expr) *eventmanagerDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e eventmanagerDo) RightJoin(table schema.Tabler, on ...field.Expr) *eventmanagerDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e eventmanagerDo) Group(cols ...field.Expr) *eventmanagerDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e eventmanagerDo) Having(conds ...gen.Condition) *eventmanagerDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e eventmanagerDo) Limit(limit int) *eventmanagerDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e eventmanagerDo) Offset(offset int) *eventmanagerDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e eventmanagerDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *eventmanagerDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e eventmanagerDo) Unscoped() *eventmanagerDo {
	return e.withDO(e.DO.Unscoped())
}

func (e eventmanagerDo) Create(values ...*model.Eventmanager) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e eventmanagerDo) CreateInBatches(values []*model.Eventmanager, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e eventmanagerDo) Save(values ...*model.Eventmanager) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e eventmanagerDo) First() (*model.Eventmanager, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Eventmanager), nil
	}
}

func (e eventmanagerDo) Take() (*model.Eventmanager, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Eventmanager), nil
	}
}

func (e eventmanagerDo) Last() (*model.Eventmanager, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Eventmanager), nil
	}
}

func (e eventmanagerDo) Find() ([]*model.Eventmanager, error) {
	result, err := e.DO.Find()
	return result.([]*model.Eventmanager), err
}

func (e eventmanagerDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Eventmanager, err error) {
	buf := make([]*model.Eventmanager, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e eventmanagerDo) FindInBatches(result *[]*model.Eventmanager, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e eventmanagerDo) Attrs(attrs ...field.AssignExpr) *eventmanagerDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e eventmanagerDo) Assign(attrs ...field.AssignExpr) *eventmanagerDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e eventmanagerDo) Joins(fields ...field.RelationField) *eventmanagerDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e eventmanagerDo) Preload(fields ...field.RelationField) *eventmanagerDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e eventmanagerDo) FirstOrInit() (*model.Eventmanager, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Eventmanager), nil
	}
}

func (e eventmanagerDo) FirstOrCreate() (*model.Eventmanager, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Eventmanager), nil
	}
}

func (e eventmanagerDo) FindByPage(offset int, limit int) (result []*model.Eventmanager, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e eventmanagerDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e eventmanagerDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e eventmanagerDo) Delete(models ...*model.Eventmanager) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *eventmanagerDo) withDO(do gen.Dao) *eventmanagerDo {
	e.DO = *do.(*gen.DO)
	return e
}
