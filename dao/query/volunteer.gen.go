// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"server/dao/model"
)

func newVolunteer(db *gorm.DB, opts ...gen.DOOption) volunteer {
	_volunteer := volunteer{}

	_volunteer.volunteerDo.UseDB(db, opts...)
	_volunteer.volunteerDo.UseModel(&model.Volunteer{})

	tableName := _volunteer.volunteerDo.TableName()
	_volunteer.ALL = field.NewAsterisk(tableName)
	_volunteer.ID = field.NewInt32(tableName, "id")
	_volunteer.Name = field.NewString(tableName, "name")
	_volunteer.Birthday = field.NewTime(tableName, "birthday")
	_volunteer.Photo = field.NewString(tableName, "photo")
	_volunteer.Bio = field.NewString(tableName, "bio")

	_volunteer.fillFieldMap()

	return _volunteer
}

type volunteer struct {
	volunteerDo volunteerDo

	ALL      field.Asterisk
	ID       field.Int32
	Name     field.String
	Birthday field.Time
	Photo    field.String
	Bio      field.String

	fieldMap map[string]field.Expr
}

func (v volunteer) Table(newTableName string) *volunteer {
	v.volunteerDo.UseTable(newTableName)
	return v.updateTableName(newTableName)
}

func (v volunteer) As(alias string) *volunteer {
	v.volunteerDo.DO = *(v.volunteerDo.As(alias).(*gen.DO))
	return v.updateTableName(alias)
}

func (v *volunteer) updateTableName(table string) *volunteer {
	v.ALL = field.NewAsterisk(table)
	v.ID = field.NewInt32(table, "id")
	v.Name = field.NewString(table, "name")
	v.Birthday = field.NewTime(table, "birthday")
	v.Photo = field.NewString(table, "photo")
	v.Bio = field.NewString(table, "bio")

	v.fillFieldMap()

	return v
}

func (v *volunteer) WithContext(ctx context.Context) *volunteerDo {
	return v.volunteerDo.WithContext(ctx)
}

func (v volunteer) TableName() string { return v.volunteerDo.TableName() }

func (v volunteer) Alias() string { return v.volunteerDo.Alias() }

func (v volunteer) Columns(cols ...field.Expr) gen.Columns { return v.volunteerDo.Columns(cols...) }

func (v *volunteer) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := v.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (v *volunteer) fillFieldMap() {
	v.fieldMap = make(map[string]field.Expr, 5)
	v.fieldMap["id"] = v.ID
	v.fieldMap["name"] = v.Name
	v.fieldMap["birthday"] = v.Birthday
	v.fieldMap["photo"] = v.Photo
	v.fieldMap["bio"] = v.Bio
}

func (v volunteer) clone(db *gorm.DB) volunteer {
	v.volunteerDo.ReplaceConnPool(db.Statement.ConnPool)
	return v
}

func (v volunteer) replaceDB(db *gorm.DB) volunteer {
	v.volunteerDo.ReplaceDB(db)
	return v
}

type volunteerDo struct{ gen.DO }

func (v volunteerDo) Debug() *volunteerDo {
	return v.withDO(v.DO.Debug())
}

func (v volunteerDo) WithContext(ctx context.Context) *volunteerDo {
	return v.withDO(v.DO.WithContext(ctx))
}

func (v volunteerDo) ReadDB() *volunteerDo {
	return v.Clauses(dbresolver.Read)
}

func (v volunteerDo) WriteDB() *volunteerDo {
	return v.Clauses(dbresolver.Write)
}

func (v volunteerDo) Session(config *gorm.Session) *volunteerDo {
	return v.withDO(v.DO.Session(config))
}

func (v volunteerDo) Clauses(conds ...clause.Expression) *volunteerDo {
	return v.withDO(v.DO.Clauses(conds...))
}

func (v volunteerDo) Returning(value interface{}, columns ...string) *volunteerDo {
	return v.withDO(v.DO.Returning(value, columns...))
}

func (v volunteerDo) Not(conds ...gen.Condition) *volunteerDo {
	return v.withDO(v.DO.Not(conds...))
}

func (v volunteerDo) Or(conds ...gen.Condition) *volunteerDo {
	return v.withDO(v.DO.Or(conds...))
}

func (v volunteerDo) Select(conds ...field.Expr) *volunteerDo {
	return v.withDO(v.DO.Select(conds...))
}

func (v volunteerDo) Where(conds ...gen.Condition) *volunteerDo {
	return v.withDO(v.DO.Where(conds...))
}

func (v volunteerDo) Order(conds ...field.Expr) *volunteerDo {
	return v.withDO(v.DO.Order(conds...))
}

func (v volunteerDo) Distinct(cols ...field.Expr) *volunteerDo {
	return v.withDO(v.DO.Distinct(cols...))
}

func (v volunteerDo) Omit(cols ...field.Expr) *volunteerDo {
	return v.withDO(v.DO.Omit(cols...))
}

func (v volunteerDo) Join(table schema.Tabler, on ...field.Expr) *volunteerDo {
	return v.withDO(v.DO.Join(table, on...))
}

func (v volunteerDo) LeftJoin(table schema.Tabler, on ...field.Expr) *volunteerDo {
	return v.withDO(v.DO.LeftJoin(table, on...))
}

func (v volunteerDo) RightJoin(table schema.Tabler, on ...field.Expr) *volunteerDo {
	return v.withDO(v.DO.RightJoin(table, on...))
}

func (v volunteerDo) Group(cols ...field.Expr) *volunteerDo {
	return v.withDO(v.DO.Group(cols...))
}

func (v volunteerDo) Having(conds ...gen.Condition) *volunteerDo {
	return v.withDO(v.DO.Having(conds...))
}

func (v volunteerDo) Limit(limit int) *volunteerDo {
	return v.withDO(v.DO.Limit(limit))
}

func (v volunteerDo) Offset(offset int) *volunteerDo {
	return v.withDO(v.DO.Offset(offset))
}

func (v volunteerDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *volunteerDo {
	return v.withDO(v.DO.Scopes(funcs...))
}

func (v volunteerDo) Unscoped() *volunteerDo {
	return v.withDO(v.DO.Unscoped())
}

func (v volunteerDo) Create(values ...*model.Volunteer) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Create(values)
}

func (v volunteerDo) CreateInBatches(values []*model.Volunteer, batchSize int) error {
	return v.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (v volunteerDo) Save(values ...*model.Volunteer) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Save(values)
}

func (v volunteerDo) First() (*model.Volunteer, error) {
	if result, err := v.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Volunteer), nil
	}
}

func (v volunteerDo) Take() (*model.Volunteer, error) {
	if result, err := v.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Volunteer), nil
	}
}

func (v volunteerDo) Last() (*model.Volunteer, error) {
	if result, err := v.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Volunteer), nil
	}
}

func (v volunteerDo) Find() ([]*model.Volunteer, error) {
	result, err := v.DO.Find()
	return result.([]*model.Volunteer), err
}

func (v volunteerDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Volunteer, err error) {
	buf := make([]*model.Volunteer, 0, batchSize)
	err = v.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (v volunteerDo) FindInBatches(result *[]*model.Volunteer, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return v.DO.FindInBatches(result, batchSize, fc)
}

func (v volunteerDo) Attrs(attrs ...field.AssignExpr) *volunteerDo {
	return v.withDO(v.DO.Attrs(attrs...))
}

func (v volunteerDo) Assign(attrs ...field.AssignExpr) *volunteerDo {
	return v.withDO(v.DO.Assign(attrs...))
}

func (v volunteerDo) Joins(fields ...field.RelationField) *volunteerDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Joins(_f))
	}
	return &v
}

func (v volunteerDo) Preload(fields ...field.RelationField) *volunteerDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Preload(_f))
	}
	return &v
}

func (v volunteerDo) FirstOrInit() (*model.Volunteer, error) {
	if result, err := v.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Volunteer), nil
	}
}

func (v volunteerDo) FirstOrCreate() (*model.Volunteer, error) {
	if result, err := v.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Volunteer), nil
	}
}

func (v volunteerDo) FindByPage(offset int, limit int) (result []*model.Volunteer, count int64, err error) {
	result, err = v.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = v.Offset(-1).Limit(-1).Count()
	return
}

func (v volunteerDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = v.Count()
	if err != nil {
		return
	}

	err = v.Offset(offset).Limit(limit).Scan(result)
	return
}

func (v volunteerDo) Scan(result interface{}) (err error) {
	return v.DO.Scan(result)
}

func (v volunteerDo) Delete(models ...*model.Volunteer) (result gen.ResultInfo, err error) {
	return v.DO.Delete(models)
}

func (v *volunteerDo) withDO(do gen.Dao) *volunteerDo {
	v.DO = *do.(*gen.DO)
	return v
}
